name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  integration:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24.0.5-dind
        options: --privileged
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Validate environment (CI)
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BCRYPT_ROUNDS: ${{ secrets.BCRYPT_ROUNDS }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python3 scripts/validate_env.py --ci

      - name: Validate auth-service settings in production mode
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BCRYPT_ROUNDS: ${{ secrets.BCRYPT_ROUNDS }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          ENV: production
        run: |
          python3 - <<'PY'
          import os, sys
          # ensure the auth-service package directory is importable despite the hyphen
          sys.path.insert(0, 'services/auth-service')
          os.environ.setdefault('ENV', 'production')
          import app.settings as s_mod
          s_mod.settings.validate()
          print('auth-service settings validated for production')
          PY

      - name: Build and start services
        run: |
          docker compose -f docker-compose.mvp.yml up -d --build

      - name: Wait for services
        run: |
          # wait for health endpoints
          for i in {1..60}; do
            if curl -sSf http://localhost:8001/health && curl -sSf http://localhost:8002/health && curl -sSf http://localhost:8000/health; then
              echo "services healthy"
              exit 0
            fi
            sleep 2
          done
          exit 1

      - name: Apply DB initializers
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/order_mgmt
        run: |
          python3 scripts/apply_migrations.py --files infra/postgres/init-auth.sql infra/postgres/init-orders.sql infra/postgres/seed-admin.sql

      - name: Run integration tests
        env:
          AUTH_SERVICE_URL: http://localhost:8001
          ORDER_SERVICE_URL: http://localhost:8002
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx
          pytest -q tests/test_integration_smoke.py

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.mvp.yml down -v
