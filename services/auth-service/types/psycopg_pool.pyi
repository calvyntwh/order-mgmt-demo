"""Minimal permissive stubs for psycopg_pool used by the project.

This file intentionally keeps signatures permissive to avoid downstream
invariant/generic errors until an upstream fix or curated stub is available.
"""

from typing import Any, AsyncIterator, Optional, Dict, Type


class AsyncConnection: ...


class AsyncConnectionPool:
    def __init__(self, conninfo: str | None = None, *args: Any, **kwargs: Any) -> None: ...
    async def open(self, wait: bool = False, timeout: float = 30.0) -> None: ...
    async def close(self, timeout: float = 5.0) -> None: ...
    async def acquire(self) -> AsyncConnection: ...
    async def release(self, conn: AsyncConnection) -> None: ...
    async def connection(self, timeout: Optional[float] = None) -> AsyncIterator[Any]: ...
    async def getconn(self, timeout: Optional[float] = None) -> Any: ...
    async def putconn(self, conn: Any) -> None: ...
    async def wait(self, timeout: float = 30.0) -> None: ...
    async def resize(self, min_size: int, max_size: Optional[int] = None) -> None: ...
    async def __aenter__(self) -> 'AsyncConnectionPool': ...
    async def __aexit__(self, exc_type: Any, exc: Any, tb: Any) -> None: ...


__all__ = ["AsyncConnection", "AsyncConnectionPool"]

